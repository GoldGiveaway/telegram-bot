from datetime import timedelta
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from filters.states import GiveawayEdit
from keyboards import for_index
from services import date, db
from interface.giveaway import IGiveaway
from services.giveaway_text import generate_giveaway_text, generate_image_url
from keyboards import for_giveaway_edit

router = Router(name=__name__)

async def open_giveaway(message: Message, giveaway_db: IGiveaway) -> None:
    """Send message edit panel giveaway"""

    await message.answer_photo(
        photo=generate_image_url(giveaway_db),
        caption=generate_giveaway_text(giveaway_db),
        reply_markup=for_giveaway_edit.giveaway_edit(giveaway_db.giveaway_id, giveaway_db.status),
    )

@router.callback_query(F.data.startswith("gedit|"))
async def _(callback: CallbackQuery, state: FSMContext):
    giveaway_id = callback.data.split("|")[2]
    type_edit = callback.data.split("|")[1]

    # TODO: –°–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    match type_edit:
        case 'title':
            text = '<b>üìù –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n' \
                '<i>* –º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤</i>\n\n' \
                '<b>–ü—Ä–∏–º–µ—Ä:</b> iPhone 15'
        case 'description':
            text = '<b>üìù –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n' \
                   '<i>* –º–∞–∫—Å–∏–º—É–º 2 000 —Å–∏–º–≤–æ–ª–æ–≤</i>'
        case 'date':
            date_now = date.now_datetime()
            text = '<b>üìù –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n\n' \
                f'<blockquote><b>‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É MSK (GMT+3). ' \
                f'–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –±–æ—Ç–µ: {date.date_to_string(date_now)}</blockquote>\n\n' \
                f'<b>–ü—Ä–∏–º–µ—Ä:</b> {date.date_to_string(date_now + timedelta(days=1))}'
        case 'win':
            text = '<b>üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞:</b>\n' \
                   '<i>* –º–∞–∫—Å–∏–º—É–º 50 —á–µ–ª–æ–≤–µ–∫</i>'
        case _:
            return

    await state.set_state(GiveawayEdit.data)
    await state.update_data({
        'giveaway_id': giveaway_id,
        'message_id': callback.message.message_id,
        'type': type_edit,
    })
    await callback.message.reply(text, reply_markup=for_index.go_home())


@router.message(GiveawayEdit.data)
async def _(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    giveaway_db = await db.get_giveaway(data['giveaway_id'])

    # TODO: –°–¥–µ–ª–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    match data['type']:
        case 'title':
            if len(message.text) > 20:
                await message.reply(f'<b>‚ùóÔ∏è –û–®–ò–ë–ö–ê:</b> –ú–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —É –í–∞—Å {len(message.text)}\n\n'
                                    '<b>üìù –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–Ω–æ–≤–∞:</b>',
                                    reply_markup=for_index.go_home())
                return
            giveaway_db.title = message.text
        case 'description':
            if len(message.text) > 2000:
                await message.reply(f'<b>‚ùóÔ∏è –û–®–ò–ë–ö–ê:</b> –ú–∞–∫—Å–∏–º—É–º 2 000 —Å–∏–º–≤–æ–ª–æ–≤, –∞ —É –í–∞—Å {len(message.text)}\n\n'
                                    '<b>üìù –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–Ω–æ–≤–∞:</b>',
                                    reply_markup=for_index.go_home())
                return
            giveaway_db.description = message.text
        case 'win':
            if not message.text.isdigit():
                await message.reply(f'<b>‚ùóÔ∏è –û–®–ò–ë–ö–ê:</b> –í—ã —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ —Å –æ—à–∏–±–∫–æ–π\n\n'
                                    '<b>üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–Ω–æ–≤–∞:</b>',
                                    reply_markup=for_index.go_home())
                return
            if int(message.text) > 50:
                await message.reply(f'<b>‚ùóÔ∏è –û–®–ò–ë–ö–ê:</b> –ú–∞–∫—Å–∏–º—É–º 50 —á–µ–ª–æ–≤–µ–∫, –∞ –í—ã —É–∫–∞–∑–∞–ª–∏ {message.text}\n\n'
                                    '<b>üìù –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–Ω–æ–≤–∞:</b>',
                                    reply_markup=for_index.go_home())
                return
            giveaway_db.win_count = int(message.text)
        case 'date':
            try:
                date_end = date.string_to_date(message.text)
            except ValueError:
                await message.reply(f'<b>‚ùóÔ∏è –û–®–ò–ë–ö–ê:</b> –î–∞—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ\n\n'
                                    '<b>üìù –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–Ω–æ–≤–∞:</b>',
                                    reply_markup=for_index.go_home())
                return
            giveaway_db.end_et = date_end
        case _: return

    await state.clear()
    giveaway_db.last_message_update = None
    await db.update_giveaway(giveaway_db.giveaway_id, giveaway_db.model_dump())
    await bot.delete_message(
        chat_id=message.chat.id,
        message_id=data['message_id']
    )
    await open_giveaway(message, giveaway_db)
